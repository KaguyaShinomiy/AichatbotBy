// API Configuration - Your Gemini API key
const API_KEY = 'AIzaSyBlk-qDSkUoO8uTzA72VGJ0Xc9Hcn4lNxo';
const API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent';
const MODEL = 'gemini-2.0-flash-exp';

const chatMain = document.getElementById('chat-main');
const chatInput = document.getElementById('chat-input');
const sendBtn = document.getElementById('send-btn');

// MBTI personality data
let userMBTI = null;

// Store conversation history
let conversationHistory = [];

// Function to add message to conversation history
function addToConversationHistory(role, content) {
  conversationHistory.push({ role, content });
  // Keep only last 10 messages to avoid token limits
  if (conversationHistory.length > 10) {
    conversationHistory = conversationHistory.slice(-10);
  }
  // Save to localStorage
  localStorage.setItem('conversationHistory', JSON.stringify(conversationHistory));
  console.log('Added to conversation history:', { role, content });
  console.log('Current history length:', conversationHistory.length);
}

// Function to load conversation history from localStorage
function loadConversationHistory() {
  const savedHistory = localStorage.getItem('conversationHistory');
  if (savedHistory) {
    conversationHistory = JSON.parse(savedHistory);
  }
}

// Function to clear conversation history
function clearConversationHistory() {
  conversationHistory = [];
  localStorage.removeItem('conversationHistory');
}

// Function to get conversation context
function getConversationContext() {
  if (conversationHistory.length === 0) {
    return '';
  }
  
  let context = '\n\n‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:\n';
  conversationHistory.forEach((msg, index) => {
    const speaker = msg.role === 'user' ? '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' : '‡∏ï‡∏±‡∏ß‡∏õ‡∏±‡∏ç‡∏´‡∏≤';
    context += `${index + 1}. ${speaker}: ${msg.content}\n`;
  });
  context += '\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô';
  
  return context;
}

// Conversation tracking data
let conversationData = {
  totalMessages: 0,
  userMessages: 0,
  aiMessages: 0,
  topics: [],
  startTime: null,
  lastMessageTime: null
};

// Load conversation data from localStorage
function loadConversationData() {
  const savedData = localStorage.getItem('conversationData');
  if (savedData) {
    conversationData = JSON.parse(savedData);
    conversationData.startTime = new Date(conversationData.startTime);
    conversationData.lastMessageTime = conversationData.lastMessageTime ? new Date(conversationData.lastMessageTime) : null;
  } else {
    conversationData.startTime = new Date();
    saveConversationData();
  }
}

// Save conversation data to localStorage
function saveConversationData() {
  localStorage.setItem('conversationData', JSON.stringify(conversationData));
}

// Update conversation statistics
function updateConversationStats(sender, message) {
  conversationData.totalMessages++;
  if (sender === 'user') {
    conversationData.userMessages++;
  } else {
    conversationData.aiMessages++;
  }
  conversationData.lastMessageTime = new Date();
  
  // Extract topic from message (simple keyword detection)
  const topics = extractTopics(message);
  topics.forEach(topic => {
    if (!conversationData.topics.includes(topic)) {
      conversationData.topics.push(topic);
    }
  });
  
  saveConversationData();
}

// Extract topics from message
function extractTopics(message) {
  const topicKeywords = {
    '‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô': ['‡πÄ‡∏á‡∏¥‡∏ô', '‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô', '‡∏≠‡∏≠‡∏°', '‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢', '‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à', '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£', '‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢', '‡∏•‡∏á‡∏ó‡∏∏‡∏ô', '‡∏´‡∏∏‡πâ‡∏ô', '‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô', '‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô', '‡∏†‡∏≤‡∏©‡∏µ', '‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì', '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ', '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢', 'üí∞'],
    '‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï': ['‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï', '‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï', '‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô', '‡πÑ‡∏•‡∏ü‡πå‡∏™‡πÑ‡∏ï‡∏•‡πå', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô', '‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á', 'üåü'],
    '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å': ['‡∏£‡∏±‡∏Å', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å', '‡πÅ‡∏ü‡∏ô', '‡∏Ñ‡∏ô‡∏£‡∏±‡∏Å', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡πÉ‡∏à', '‡∏´‡∏±‡∏ß‡πÉ‡∏à', '‡πÇ‡∏£‡πÅ‡∏°‡∏ô‡∏ï‡∏¥‡∏Å', '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏£‡πÅ‡∏°‡∏ô‡∏ï‡∏¥‡∏Å', '‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏Ñ‡∏π‡πà', '‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏á‡∏á‡∏≤‡∏ô', '‚ù§Ô∏è'],
    '‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß': ['‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß', '‡∏û‡πà‡∏≠', '‡πÅ‡∏°‡πà', '‡∏•‡∏π‡∏Å', '‡∏û‡∏µ‡πà', '‡∏ô‡πâ‡∏≠‡∏á', '‡∏õ‡∏π‡πà', '‡∏¢‡πà‡∏≤', '‡∏ï‡∏≤', '‡∏¢‡∏≤‡∏¢', '‡∏ç‡∏≤‡∏ï‡∏¥', '‡∏ö‡πâ‡∏≤‡∏ô', 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶'],
    '‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤': ['‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤', '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', '‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢', '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢', '‡∏ß‡∏¥‡∏ä‡∏≤', '‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô', '‡∏™‡∏≠‡∏ö', '‡∏Ñ‡∏£‡∏π', '‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå', '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', '‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ', 'üìö'],
    '‡∏≠‡∏≤‡∏ä‡∏µ‡∏û': ['‡∏á‡∏≤‡∏ô', '‡∏≠‡∏≤‡∏ä‡∏µ‡∏û', '‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á', '‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', '‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á', '‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏á‡∏≤‡∏ô', '‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô', '‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå', 'üíº'],
    '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û': ['‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û', '‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£', '‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á', '‡πÇ‡∏£‡∏Ñ', '‡∏¢‡∏≤', '‡∏´‡∏°‡∏≠', '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•', '‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û', '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å', '‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å', 'üè•'],
    '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à': ['‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à', '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', '‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤', '‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢', '‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î', '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', '‡∏Å‡∏≥‡πÑ‡∏£', '‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô', '‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô', '‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏≠‡∏±‡∏û', '‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£', 'üíº'],
    '‡∏≠‡∏∑‡πà‡∏ô‡πÜ': ['‡∏≠‡∏∑‡πà‡∏ô‡πÜ', '‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ', '‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô', '‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ', 'üí¨']
  };
  
  const foundTopics = [];
  const lowerMessage = message.toLowerCase();
  
  Object.entries(topicKeywords).forEach(([topic, keywords]) => {
    if (keywords.some(keyword => lowerMessage.includes(keyword))) {
      foundTopics.push(topic);
    }
  });
  
  return foundTopics;
}



// Add summary button - DISABLED
function addSummaryButton() {
  // Summary button is now disabled - no longer showing
  return;
}

// Load MBTI data on page load
function loadMBTIData() {
  const mbtiData = localStorage.getItem('userMBTI');
  if (mbtiData) {
    userMBTI = JSON.parse(mbtiData);
    console.log('Loaded MBTI data:', userMBTI);
  }
}

// Show ChatGPT greeting message
function showChatGPTGreeting() {
  const selectedCategory = localStorage.getItem('selectedChatCategory');
  const categoryData = localStorage.getItem('selectedChatCategoryData');
  
  let greetingMessage = '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏â‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠ ‡∏ï‡∏±‡∏ß‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏â‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏à‡∏∞‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞? üòä';
  
  if (selectedCategory && categoryData) {
    try {
      const category = JSON.parse(categoryData);
      const categoryEmojis = {
        '‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô': 'üí∞',
        '‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï': 'üåü',
        '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å': '‚ù§Ô∏è',
        '‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
        '‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤': 'üìö',
        '‡∏≠‡∏≤‡∏ä‡∏µ‡∏û': 'üíº',
        '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û': 'üè•',
        '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à': 'üè¢',
        '‡∏≠‡∏∑‡πà‡∏ô‡πÜ': 'üí¨'
      };
      const emoji = categoryEmojis[selectedCategory] || 'üí¨';
      
      greetingMessage = `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ ${category.title} ${emoji} ‡∏â‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠ ‡∏ï‡∏±‡∏ß‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏â‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏¢‡πÉ‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏à‡∏∞‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞? üòä`;
    } catch (e) {
      console.error('Error parsing category data:', e);
    }
  }
  
  appendMessage(greetingMessage, 'ai');
}

// Get MBTI-based prompt customization
function getMBTIPromptCustomization() {
  if (!userMBTI || !userMBTI.type) {
    return {
      style: "‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥",
      approach: "‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à",
      focus: "‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå"
    };
  }

  const mbtiType = userMBTI.type;
  const customization = {
    style: "",
    approach: "",
    focus: ""
  };

  // Customize based on MBTI type
  switch (mbtiType) {
    case 'INTJ':
    case 'INTP':
      customization.style = "‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ä‡∏¥‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå";
      customization.approach = "‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
      customization.focus = "‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏ô‡∏≠‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ";
      break;
    
    case 'INFJ':
    case 'INFP':
      customization.style = "‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å";
      customization.approach = "‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡πá‡∏ô‡∏≠‡∏Å‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏à";
      customization.focus = "‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏õ‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à";
      break;
    
    case 'ENTJ':
    case 'ENTP':
      customization.style = "‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏ï‡∏∑‡∏≠‡∏£‡∏∑‡∏≠‡∏£‡πâ‡∏ô";
      customization.approach = "‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏ï‡∏£‡∏á‡∏°‡∏≤";
      customization.focus = "‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏ô‡∏≠‡∏ó‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç";
      break;
    
    case 'ENFJ':
    case 'ENFP':
      customization.style = "‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô";
      customization.approach = "‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏£‡∏∞‡∏ï‡∏∑‡∏≠‡∏£‡∏∑‡∏≠‡∏£‡πâ‡∏ô";
      customization.focus = "‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á";
      break;
    
    case 'ISTJ':
    case 'ISFJ':
      customization.style = "‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ";
      customization.approach = "‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏ö";
      customization.focus = "‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏ô‡∏≠‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô";
      break;
    
    case 'ESTJ':
    case 'ESFJ':
      customization.style = "‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏à";
      customization.approach = "‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏ï‡∏£‡∏á‡∏°‡∏≤";
      customization.focus = "‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ";
      break;
    
    case 'ISTP':
    case 'ISFP':
      customization.style = "‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à";
      customization.approach = "‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à";
      customization.focus = "‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô";
      break;
    
    case 'ESTP':
    case 'ESFP':
      customization.style = "‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ô‡∏∏‡∏Å";
      customization.approach = "‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏∏‡∏Å";
      customization.focus = "‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏î‡πÉ‡∏™";
      break;
    
    default:
      customization.style = "‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥";
      customization.approach = "‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à";
      customization.focus = "‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå";
  }

  return customization;
}

function createAIProfile() {
  return `<div class="profile-ai"><div class="profile-avatar"><img src="MascotP.png" alt="‡∏ï‡∏±‡∏ß‡∏õ‡∏±‡∏ç‡∏´‡∏≤" class="mascot-avatar"></div><div class="profile-name">‡∏ï‡∏±‡∏ß‡∏õ‡∏±‡∏ç‡∏´‡∏≤</div></div>`;
}

function appendMessage(text, sender, isHTML = false) {
  const wrapper = document.createElement('div');
  wrapper.className = 'message-row ' + sender;
  if (sender === 'ai') {
    wrapper.innerHTML = createAIProfile() + `<div class="message message-bubble ai">${isHTML ? text : `<span>${text}</span>`}</div>`;
  } else {
    wrapper.innerHTML = `
      <div class="message message-bubble user">${isHTML ? text : `<span>${text}</span>`}</div>
      <div class="profile-user">
        <div class="profile-avatar">
          <img src="UserP.png" alt="User" class="user-avatar">
        </div>
        <div class="profile-name">‡∏Ñ‡∏∏‡∏ì</div>
      </div>
    `;
  }
  chatMain.appendChild(wrapper);
  chatMain.scrollTop = chatMain.scrollHeight;
  
  // Add to conversation history (only for actual messages, not thinking animation)
  if (!isHTML || !text.includes('thinking-dots')) {
    addToConversationHistory(sender, text);
    updateConversationStats(sender, text);
  }
  
  return wrapper;
}

function appendThinking() {
  const thinkingHTML = `<span class="thinking-dots"><span></span><span></span><span></span></span>`;
  return appendMessage(thinkingHTML, 'ai', true);
}

// Retry function for API calls
async function retryAPICall(fn, maxRetries = 3, delay = 1000) {
  for (let i = 0; i < maxRetries; i++) {
    try {
      return await fn();
    } catch (error) {
      if (i === maxRetries - 1) throw error;
      
      // Wait before retrying
      await new Promise(resolve => setTimeout(resolve, delay * (i + 1)));
    }
  }
}

async function sendMessage() {
  const userMsg = chatInput.value.trim();
  if (!userMsg) return;
  

  
  appendMessage(userMsg, 'user');
  chatInput.value = '';
  const thinkingDiv = appendThinking();

  try {
    // Get MBTI customization
    const mbtiCustomization = getMBTIPromptCustomization();
    
    // Get selected category for focused responses
    const selectedCategory = localStorage.getItem('selectedChatCategory');
    const categoryData = localStorage.getItem('selectedChatCategoryData');
    
         // Create personalized prompt based on MBTI and selected category
           let prompt = `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: "${userMsg}"
      
      ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠ ‡∏ï‡∏±‡∏ß‡∏õ‡∏±‡∏ç‡∏´‡∏≤:
  1. ‡∏ï‡∏≠‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£ ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ä‡∏µ‡∏ß‡∏≤
  2. ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏• ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏ô‡∏¥‡∏ó
  3. ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
  4. ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 2-3 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
  5. ‡∏≠‡∏¢‡πà‡∏≤‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠ MBTI ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  6. ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡πá‡∏Å‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡πÄ‡∏ä‡πà‡∏ô "‡∏Ñ‡πà‡∏∞", "‡∏ô‡∏∞‡∏Ñ‡∏∞", "‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞"
  7. ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏π‡∏î
  8. ‡∏≠‡∏¢‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏´‡πâ‡∏ß‡∏ô‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏≤‡∏Å‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
  9. ‡πÉ‡∏ä‡πâ emoji ‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô`;

               // Add conversation context
        const conversationContext = getConversationContext();
        if (conversationContext) {
          prompt += conversationContext;
          console.log('Conversation context added:', conversationContext);
        }

         // Add category-specific focus if available
     if (selectedCategory && categoryData) {
       try {
         const category = JSON.parse(categoryData);
         // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏Å‡πà‡∏≠‡∏ô ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
         if (userMsg.length > 3) {
           prompt += `\n5. ‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á${category.title}‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏≠‡∏¢‡πà‡∏≤‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á`;
         }
        
                                   // Add category-specific guidance
          if (userMsg.length > 3) {
            switch(selectedCategory) {
              case '‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô':
                prompt += `\n6. ‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏° ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢`;
                break;
              case '‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï':
                prompt += `\n6. ‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏£‡∏á‡∏ö‡∏±‡∏ô‡∏î‡∏≤‡∏•‡πÉ‡∏à`;
                break;
              case '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å':
                prompt += `\n6. ‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à`;
                break;
              case '‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß':
                prompt += `\n6. ‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à`;
                break;
              case '‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤':
                prompt += `\n6. ‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏£‡∏á‡∏ö‡∏±‡∏ô‡∏î‡∏≤‡∏•‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå`;
                break;
              case '‡∏≠‡∏≤‡∏ä‡∏µ‡∏û':
                prompt += `\n6. ‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏£‡∏á‡∏ö‡∏±‡∏ô‡∏î‡∏≤‡∏•‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå`;
                break;
              case '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û':
                prompt += `\n6. ‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢`;
                break;
              case '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à':
                prompt += `\n6. ‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤ ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå`;
                break;
              case '‡∏≠‡∏∑‡πà‡∏ô‡πÜ':
                prompt += `\n6. ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á`;
                break;
              default:
                prompt += `\n6. ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå`;
            }
          }
        } catch (e) {
          console.error('Error parsing category data:', e);
        }
      } else {
        if (userMsg.length > 3) {
          prompt += `\n5. ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á`;
        }
      }

      // Add MBTI context if available (only for prompt, not for user to see)
      if (userMBTI && userMBTI.type && userMsg.length > 3) {
        prompt += `\n\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û ${userMBTI.type} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ ‡πÅ‡∏ï‡πà‡∏´‡πâ‡∏≤‡∏°‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á MBTI ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à`;
      }

                                                                                                               const response = await fetch(`${API_URL}?key=${API_KEY}`, {
                method: 'POST',
                headers: { 
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  contents: [
                    {
                      parts: [
                        {
                          text: '‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠ "‡∏ï‡∏±‡∏ß‡∏õ‡∏±‡∏ç‡∏´‡∏≤" ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡πá‡∏Å‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏π‡∏î ‡πÅ‡∏•‡∏∞‡∏ñ‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏• ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏ô‡∏¥‡∏ó\n\n' + prompt
                        }
                      ]
                    }
                  ],
                  generationConfig: {
                    maxOutputTokens: 500,
                    temperature: 0.7
                  }
                })
              });

        if (!response.ok) {
          const errorData = await response.json();
          const errorMessage = errorData.error?.message || response.statusText;
          
          // Handle specific error cases
          if (errorMessage.includes('overloaded') || errorMessage.includes('quota') || errorMessage.includes('rate limit')) {
            throw new Error('API ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô 1-2 ‡∏ô‡∏≤‡∏ó‡∏µ');
          } else if (errorMessage.includes('invalid') || errorMessage.includes('bad request')) {
            throw new Error('‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
          } else if (response.status === 429) {
            throw new Error('‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô API ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
          } else {
            throw new Error(`‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î API: ${errorMessage}`);
          }
        }

                                const data = await response.json();
                 if (data.candidates?.[0]?.content?.parts?.[0]?.text) {
                   chatMain.removeChild(thinkingDiv); // Remove thinking animation
                   appendMessage(data.candidates[0].content.parts[0].text, 'ai');
                 } else {
                   throw new Error('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å AI');
                 }

     } catch (err) {
     console.error('Error:', err);
     chatMain.removeChild(thinkingDiv); // Remove thinking animation
     
     // Provide user-friendly error messages
     let errorMessage = '';
     if (err.message.includes('overloaded') || err.message.includes('‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å')) {
       errorMessage = '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà üòÖ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å 1-2 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡∏î‡∏π';
     } else if (err.message.includes('quota') || err.message.includes('rate limit')) {
       errorMessage = '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô API ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ üîÑ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ';
     } else if (err.message.includes('network') || err.message.includes('connection')) {
       errorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö AI ‡πÑ‡∏î‡πâ üì° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà';
     } else {
       errorMessage = `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err.message} ‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`;
     }
     
     appendMessage(errorMessage, 'ai');
   }
}

// Add quiz button functionality
function addQuizButton() {
  if (!userMBTI) {
    const quizButton = document.createElement('button');
    quizButton.textContent = '‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û';
    quizButton.className = 'quiz-btn';
    quizButton.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: linear-gradient(90deg, #e75480 0%, #ffb6d5 100%);
      color: white;
      border: none;
      border-radius: 20px;
      padding: 12px 20px;
      font-size: 14px;
      cursor: pointer;
      z-index: 1000;
      box-shadow: 0 2px 8px rgba(231, 84, 128, 0.2);
    `;
    quizButton.addEventListener('click', () => {
      window.location.href = 'QuizPage.html';
    });
    document.body.appendChild(quizButton);
  }
}



document.addEventListener('DOMContentLoaded', () => {
  if (!chatMain || !chatInput || !sendBtn) {
    console.error('Required DOM elements are missing');
    return;
  }
  

  
  // Load conversation data
  loadConversationData();
  
  // Load conversation history
  loadConversationHistory();
  
  // Load MBTI data
  loadMBTIData();
  
  // Show ChatGPT greeting message
  showChatGPTGreeting();
  
  // Add quiz button if no MBTI data
  addQuizButton();
  
  // Summary button is now disabled
  
  sendBtn.addEventListener('click', sendMessage);
  chatInput.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') sendMessage();
  });
});